package com.sleipnir.core;

import org.jooq.Record;
import org.modelmapper.PropertyMap;

public interface DomainFactory <T,TRECORD  extends org.jooq.impl.UpdatableRecordImpl<TRECORD>>{
	/**
	   * Makes a Type out of Jooq's Record Type and specific Type.
	   * this overloaded version of method make() is commonly used for fetch operations.
	   * @param record
	   * @param clazz (target Type)
	   * @return target Type itself for post make operation.
	   */
	  public T make(Record record,Class<T> clazz);
	  
	  /**
	   * Creates a TypeRecord generated by jooq out of the passed Type.
	   * 
	   * @param target Type
	   * @return TypeRecord generated by jooq
	   */
	  public TRECORD createRecord(T type);
	  
	  /**
	   * Makes a Type out of Jooq's Record Type and specific Type.
	   * this overloaded version of method make() is commonly used for fetch operations.
	   * @param record
	   * @param clazz (target Type)
	   * @return target Type itself for post make operation.
	   */
	  public <TMAP extends PropertyMap<Record,T>> T make(Record record,Class<T> account,TMAP propertyMap);
	  
	  /**
	   * 
	   * @param entity
	   * @param pojo
	   * @param propertyMap
	   * @return
	   */
	  public <TMAP extends PropertyMap<T,POJO>,POJO> TRECORD createRecord(T entity,Class<POJO> pojo,TMAP propertyMap);

}
